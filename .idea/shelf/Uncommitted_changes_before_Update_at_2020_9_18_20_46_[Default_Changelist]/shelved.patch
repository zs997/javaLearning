Index: algorithm/src/main/java/cn/kh/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package cn.kh;\r\n\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n        System.out.println(\"test\");\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- algorithm/src/main/java/cn/kh/Main.java	(revision db9b8fdfb884758e55930fde1d97f6757cc0535b)
+++ algorithm/src/main/java/cn/kh/Main.java	(date 1600393296744)
@@ -1,7 +1,27 @@
 package cn.kh;
 
+import java.util.Arrays;
+import java.util.Scanner;
+
 public class Main {
     public static void main(String[] args) {
-        System.out.println("test");
+        Scanner sc = new Scanner(System.in);
+        while (sc.hasNext()){
+            String str = sc.next();
+            int count = 0;
+            for (int i = 0 ; i < str.length() ; i ++){
+                if (str.charAt(i) >= '0' && str.charAt(i) <= '9'){
+                    count ++;
+                    if (count == 4 && i + 1 < str.length()&&!(str.charAt(i + 1) >= '0' && str.charAt(i + 1) <= '9')){
+                        System.out.print(Integer.parseInt(str.substring(i - 3 ,i + 1)) +" ");
+                    }
+                }else{
+                    count = 0;
+                }
+            }
+            if (count == 4){
+                System.out.println(Integer.parseInt(str.substring(str.length()-4)));
+            }
+        }
     }
 }
Index: algorithm/src/main/java/cn/kh/Main2.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package cn.kh;\r\n\r\nimport java.util.Scanner;\r\n\r\npublic  class Main2 {\r\n    public static long minTime = Long.MAX_VALUE;\r\n    public static int[][] direction = new int[][]{{1,0},{0,1},{-1,0},{0,-1}};\r\n    public static void main(String[] args){\r\n        Scanner sc = new Scanner(System.in);\r\n        while (sc.hasNext()){\r\n            int n = sc.nextInt();\r\n            int k = sc.nextInt();\r\n            char[][] array = new char[n][n];\r\n            for (int i = 0 ; i < n ; i ++){\r\n                String str = sc.next();\r\n                for (int j = 0 ; j < n ; j ++){\r\n                    array[i][j] = str.charAt(j);\r\n                }\r\n            }\r\n            deepSearch(array,0,0,0,k);\r\n            if (minTime == Long.MAX_VALUE){\r\n                System.out.println(\"No solution\");\r\n            }else{\r\n                System.out.println(minTime);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 表示X星人此时到达row,column所花费时间\r\n     */\r\n    public static void deepSearch(char[][] map,int row,int column,int time,int k){\r\n        if (row == map.length - 1&& column == map[0].length - 1){\r\n            minTime = Math.min(minTime,time);\r\n            return;\r\n        }\r\n        //标记此位置已经走过\r\n        char c = map[row][column];\r\n        map[row][column] = '2';\r\n        for (int i = 0 ; i < direction.length ; i ++){\r\n            int newRow = row + direction[i][0];\r\n            int newColumn = column + direction[i][1];\r\n            if (newRow < 0 || newRow >= map.length || newColumn < 0 || newColumn >= map[0].length ||map[newRow][newColumn] == '1' || map[newRow][newColumn] == '2'){\r\n                continue;\r\n            }\r\n            if (map[newRow][newColumn] == '#'){\r\n                deepSearch(map,newRow,newColumn,time + k + 1,k);\r\n            }else{\r\n                deepSearch(map,newRow,newColumn,time + 1,k);\r\n            }\r\n        }\r\n        map[row][column] = c;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- algorithm/src/main/java/cn/kh/Main2.java	(revision db9b8fdfb884758e55930fde1d97f6757cc0535b)
+++ algorithm/src/main/java/cn/kh/Main2.java	(date 1600342244691)
@@ -45,8 +45,6 @@
             }
             if (map[newRow][newColumn] == '#'){
                 deepSearch(map,newRow,newColumn,time + k + 1,k);
-            }else{
-                deepSearch(map,newRow,newColumn,time + 1,k);
             }
         }
         map[row][column] = c;
Index: algorithm/src/main/java/cn/hsq/baidu/Main2.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package cn.hsq.baidu;\r\n\r\nimport java.util.Scanner;\r\n\r\n/**\r\n * @ClassName Main2\r\n * @Description TODO\r\n * @Author huanshunqi\r\n * @Date 2020/9/13 20:44\r\n * @Version 1.0\r\n **/\r\npublic class Main2 {\r\n    public static long minTime = Long.MAX_VALUE;\r\n    public static int[][] direction = new int[][]{{1,0},{0,1},{-1,0},{0,-1}};\r\n    public static void main(String[] args){\r\n        Scanner sc = new Scanner(System.in);\r\n        while (sc.hasNext()){\r\n            int n = sc.nextInt();\r\n            int k = sc.nextInt();\r\n            char[][] array = new char[n][n];\r\n            for (int i = 0 ; i < n ; i ++){\r\n                String str = sc.next();\r\n                for (int j = 0 ; j < n ; j ++){\r\n                    array[i][j] = str.charAt(j);\r\n                }\r\n            }\r\n            deepSearch(array,0,0,0,k);\r\n            if (minTime == Long.MAX_VALUE){\r\n                System.out.println(\"No solution\");\r\n            }else{\r\n                System.out.println(minTime);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 表示X星人此时到达row,column所花费时间\r\n     */\r\n    public static void deepSearch(char[][] map,int row,int column,int time,int k){\r\n        if (row == map.length - 1&& column == map[0].length - 1){\r\n            minTime = Math.min(minTime,time);\r\n            return;\r\n        }\r\n        //标记此位置已经走过\r\n        char c = map[row][column];\r\n        map[row][column] = '2';\r\n        for (int i = 0 ; i < direction.length ; i ++){\r\n            int newRow = row + direction[i][0];\r\n            int newColumn = column + direction[i][1];\r\n            if (newRow < 0 || newRow >= map.length || newColumn < 0 || newColumn >= map[0].length ||map[newRow][newColumn] == '1' || map[newRow][newColumn] == '2'){\r\n                continue;\r\n            }\r\n            if (map[newRow][newColumn] == '#'){\r\n                deepSearch(map,newRow,newColumn,time + k + 1,k);\r\n            }else{\r\n                deepSearch(map,newRow,newColumn,time + 1,k);\r\n            }\r\n        }\r\n        map[row][column] = c;\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- algorithm/src/main/java/cn/hsq/baidu/Main2.java	(revision db9b8fdfb884758e55930fde1d97f6757cc0535b)
+++ algorithm/src/main/java/cn/hsq/baidu/Main2.java	(date 1600003921685)
@@ -50,7 +50,7 @@
             if (newRow < 0 || newRow >= map.length || newColumn < 0 || newColumn >= map[0].length ||map[newRow][newColumn] == '1' || map[newRow][newColumn] == '2'){
                 continue;
             }
-            if (map[newRow][newColumn] == '#'){
+            if (map[newRow][newColumn] == '0'){
                 deepSearch(map,newRow,newColumn,time + k + 1,k);
             }else{
                 deepSearch(map,newRow,newColumn,time + 1,k);
Index: algorithm/src/main/java/cn/kh/Main3.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- algorithm/src/main/java/cn/kh/Main3.java	(date 1600086728815)
+++ algorithm/src/main/java/cn/kh/Main3.java	(date 1600086728815)
@@ -0,0 +1,53 @@
+package cn.kh;
+import java.util.*;
+public class Main3 {
+    public static void main(String[] args) {
+        Scanner sc = new Scanner(System.in);
+        int T = sc.nextInt();
+        sc.nextLine();
+        for(int q=0;q<T;q++){
+            int n = sc.nextInt();
+            int m = sc.nextInt();
+            sc.nextLine();
+            int[] heart = new int[n];
+            int[] res = new int[n];
+            for(int i=0;i<n;i++){
+                heart[i] = sc.nextInt();
+                res[i] = heart[i];
+            }
+            Arrays.sort(heart);
+            sc.nextLine();
+            int[] rest = new int[m];
+            for(int j=0;j<m;j++){
+                rest[j] = sc.nextInt();
+            }
+            Arrays.sort(rest);
+            sc.nextLine();
+
+
+            int start = 0;
+            HashMap<Integer,Integer> map = new HashMap<>();
+            for(int i=0;i<n;i++){
+                int pos = count(rest,heart[i],start);
+                start = pos;
+                map.put(heart[i],m-pos);
+            }
+
+            for(int i=0;i<n;i++){
+                System.out.print(map.get(res[i])+" ");
+            }
+            sc.nextLine();
+        }
+    }
+
+    public  static int count(int[] num,int target,int start){
+        int i=start;
+        for(;i<num.length;i++){
+            if(num[i]>=target){
+                break;
+            }
+        }
+        return i;
+    }
+}
+
Index: algorithm/src/main/java/cn/kh/Main5.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- algorithm/src/main/java/cn/kh/Main5.java	(date 1600165384304)
+++ algorithm/src/main/java/cn/kh/Main5.java	(date 1600165384304)
@@ -0,0 +1,45 @@
+package cn.kh;
+import java.util.*;
+public class Main5 {
+    public static void main(String[] args){
+        Scanner sc = new Scanner(System.in);
+        while (sc.hasNext()){
+            String[] ss = sc.nextLine().split("\\s+");
+            int m = Integer.parseInt(ss[0]);
+            int n = Integer.parseInt(ss[1]);
+            LinkedList<Integer>[] queues = new LinkedList[n];
+            boolean[] flags = new boolean[n];
+            for (int i = 0 ; i < n ; i ++){
+                queues[i] = new LinkedList();
+                queues[i].add(i + 1);
+                flags[i] = true;
+            }
+            for (int i = 0 ; i < m ; i ++){
+                String action = sc.nextLine();
+                String[] actions = action.split("\\s+");
+                if (actions[0].equals("C")){
+                    int a = Integer.parseInt(actions[1]) - 1;
+                    int b = Integer.parseInt(actions[2]) - 1;
+                    flags[a] = false;
+                    for (Integer num : queues[a]) {
+                        queues[b].add(num);
+                    }
+                }else{
+                    boolean flag = false;
+                    int a = Integer.parseInt(actions[1]);
+                    int b = Integer.parseInt(actions[2]);
+                    for (int j = 0 ; j < n ; j ++){
+                        if (flags[j] && queues[j].contains(a) && queues[j].contains(b)){
+                            flag = true;
+                            System.out.println(Math.abs(queues[j].indexOf(a) - queues[j].indexOf(b) - 1));
+                            break;
+                        }
+                    }
+                    if (!flag){
+                        System.out.println(-1);
+                    }
+                }
+            }
+        }
+    }
+}
Index: algorithm/src/main/java/cn/kh/Main4.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- algorithm/src/main/java/cn/kh/Main4.java	(date 1600088378738)
+++ algorithm/src/main/java/cn/kh/Main4.java	(date 1600088378738)
@@ -0,0 +1,80 @@
+package cn.kh;
+
+import java.util.Scanner;
+import java.util.TreeSet;
+
+public class Main4 {
+    public static void main(String[] args) {
+        Scanner sc = new Scanner(System.in);
+        int n = sc.nextInt();
+        int m = sc.nextInt();
+        sc.nextLine();
+        int[] parent = new int[n];
+        for(int i=0;i<n;i++) {
+            parent[i] = i;
+        }
+        for(int i=0;i<m;i++){
+            String line = sc.nextLine();
+            String[] lines = line.split(" ");
+            if(lines[0].equals("C")){
+               int a = Integer.parseInt(lines[1]);
+               int b = Integer.parseInt(lines[2]);
+               union(a-1,b-1,parent);
+            }
+
+            if(lines[0].equals("Q")){
+                int c = Integer.parseInt(lines[1]);
+                int d = Integer.parseInt(lines[2]);
+                int val = find2(c,d,parent);
+                if(val==0){
+                    System.out.println(-1);
+                }else{
+                    System.out.println(val);
+                }
+            }
+
+        }
+
+
+
+    }
+
+    public static int find(int x,int[]parent) {
+
+        int root_x = x;
+
+        while(parent[root_x]!=-1) {
+            root_x = parent[root_x];
+        }
+
+        return root_x;
+    }
+
+    public static int find2(int x,int y,int[]parent) {
+        int count = 0;
+        int root_x = x;
+
+        while(parent[root_x]!=y) {
+            root_x = parent[root_x];
+            count++;
+        }
+
+        return count--;
+    }
+
+
+    public static int union(int x,int y,int[]parent) {
+
+        int x_root = find(x,parent);
+
+        int y_root = find(y,parent);
+
+        if(x_root!=y_root) {
+            parent[x_root] = y_root;
+        }else {
+            return -1;
+        }
+        return 0;
+    }
+
+}
Index: algorithm/src/main/java/cn/kh/Main7.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- algorithm/src/main/java/cn/kh/Main7.java	(date 1600345091466)
+++ algorithm/src/main/java/cn/kh/Main7.java	(date 1600345091466)
@@ -0,0 +1,61 @@
+package cn.kh;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Scanner;
+
+public class Main7 {
+    public static void main(String[] args) {
+        Scanner sc = new Scanner(System.in);
+        int T = sc.nextInt();
+        sc.nextLine();
+        List<String> res = new ArrayList<>();
+        for(int k=0;k<T;k++) {
+            int n = sc.nextInt();
+            int m = sc.nextInt();
+            sc.nextLine();
+            char[][] map = new char[n][m];
+            int startx = 0,starty = 0,endx = 0,endy = 0;
+            for (int i = 0; i < n; i++) {
+                String tmp = sc.nextLine();
+                for (int j = 0; j < m; j++) {
+                    map[i][j] = tmp.charAt(j);
+                    if(map[i][j]=='S'){
+                        startx = i;
+                        starty = j;
+                    }
+                    if(map[i][j]=='E'){
+                        endx = i;
+                        endy = j;
+                    }
+                }
+            }
+            if(dfs(map,startx,starty,endx,endy)){
+                res.add("YES");
+            }else{
+                res.add("NO");
+            }
+        }
+        for(String q : res){
+            System.out.println(q);
+        }
+    }
+
+    public static boolean dfs(char[][] map,int i,int j,int endx,int endy){
+        if(i==endx&&j==endy) {
+            return true;
+        }
+        if(i<0||i>=map.length||j<0||j>=map[0].length||map[i][j]=='#'||map[i][j]=='2'){
+           return false;
+        }
+        //标记此位置已经走过
+        char c = map[i][j];
+        map[i][j] = '2';
+        if(dfs(map,i+1,j,endx,endy)) return true;
+        if(dfs(map,i-1,j,endx,endy)) return true;
+        if(dfs(map,i,j-1,endx,endy)) return true;
+        if(dfs(map,i,j+1,endx,endy)) return true;
+        map[i][j] = c;
+        return false;
+    }
+}
Index: algorithm/src/main/java/cn/kh/Main6.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- algorithm/src/main/java/cn/kh/Main6.java	(date 1600393195929)
+++ algorithm/src/main/java/cn/kh/Main6.java	(date 1600393195929)
@@ -0,0 +1,23 @@
+package cn.kh;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Scanner;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+
+public class Main6 {
+    public static void main(String[] args) {
+        Scanner sc = new Scanner(System.in);
+        String s = sc.nextLine();
+        String regex = "\\d{4}";
+        Pattern p = Pattern.compile(regex);
+        Matcher m = p.matcher(s);
+        while (m.find()){
+            String str = m.group();
+            if(!"".equals(str)&&str.length()<5&&Integer.parseInt(str)>=1000&&Integer.parseInt(str)<=3999){
+                System.out.print(str+" ");
+            }
+        }
+    }
+}
